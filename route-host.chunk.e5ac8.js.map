{"version":3,"sources":["webpack:///./routes/host/index.js","webpack:///./routes/host/style.css"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Card","data","suit","props","number","place","path","src","LargeCard","card","Suit","HEARTS","SPADES","DIAMONDS","CLUBS","class","style","row","largeCard","ViewState","Host","state","time","Date","now","count","deck","Array","fill","map","e","i","value","board","viewState","tick","updateTime","newTick","newViewState","setState","increment","next","cards","slice","aligner","key","alignedItem","componentDidMount","this","timer","setInterval","componentWillUnmount","clearInterval","renderRow","hearts","spades","diamonds","clubs","render","_","profile","onClick","Component","module","exports"],"mappings":"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","file":"route-host.chunk.e5ac8.js","sourcesContent":["import { h, Component } from 'preact';\nimport style from './style';\n\nfunction shuffle(array) {\n\tlet currentIndex = array.length, temporaryValue, randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n}\n\nfunction Card({ data, suit, ...props }) {\n\t// modulo 13 places the number in range of a suit\n\t// adding 2 gives us an easy way to place the index into the face cards\n\tlet number = (data.place%13)+2;\n\n\tif (number == 11) {\n\t\tnumber = 'jack';\n\t} else if (number == 12) {\n\t\tnumber = 'queen';\n\t} else if (number == 13) {\n\t\tnumber = 'king'\n\t} else if (number == 14) {\n\t\tnumber = 'ace'\n\t}\n\tconst path = `/preact-pokeno/assets/svg-cards/${number}_of_${suit}.svg`;\n\treturn (<img src={path} {...props} />);\n}\n\nexport function LargeCard ({ card }) {\n\n\tlet suit;\n\n\tif (card.place >= 0 && card.place < 13) {\n\t\tsuit = Suit.HEARTS;\n\t} else if (card.place >= 13 && card.place < 26) {\n\t\tsuit = Suit.SPADES;\n\t} else if (card.place >= 26 && card.place < 39) {\n\t\tsuit = Suit.DIAMONDS;\n\t} else {\n\t\tsuit = Suit.CLUBS;\n\t}\n\n\treturn (\n\t\t<div class={style.row}>\n\t\t\t<Card data={card} suit={suit} class={style.largeCard} />\n\t\t</div>\n\t);\n}\n\nconst ViewState = {\n\tALL_CARDS: 0,\n\tLARGE_CARD: 1,\n};\n\nconst Suit = {\n\tHEARTS: 'hearts',\n\tSPADES: 'spades',\n\tDIAMONDS: 'diamonds',\n\tCLUBS: 'clubs',\n}\n\nexport default class Host extends Component {\n\tstate = {\n\t\ttime: Date.now(),\n\t\tcount: -1,\n\t\tdeck: shuffle(Array(52).fill(false).map((e, i) => ({value: e, place: i}))),\n\t\tboard: Array(52).fill(),\n\t\tviewState: ViewState.ALL_CARDS,\n\t\ttick: 0,\n\t};\n\n\t// update the current time\n\tupdateTime = () => {\n\t\tlet {\n\t\t\ttick: newTick,\n\t\t\tviewState: newViewState\n\t\t} = this.state;\n\n\t\tif (newTick > 0) {\n\t\t\tnewTick--;\n\t\t}\n\n\t\tif (newTick === 0) {\n\t\t\tnewViewState = ViewState.ALL_CARDS\n\t\t}\n\n\t\tthis.setState({ time: Date.now(), tick: newTick, viewState: newViewState });\n\t};\n\n\tincrement = () => {\n\t\t// draw the next card\n\t\tconst next = this.state.count + 1;\n\t\tlet deck = [...this.state.deck]; \n\t\t\n\t\t// change the value to \"seen\" as reference for the board\n\t\tlet card = { ...deck[next], value: true };\n\t\tdeck[next] = card;\n\n\t\t// determine where on the board the card will be displayed\n\t\tlet board = [...this.state.board]; \n\t\tboard[card.place] = card;\n\n\t\tthis.setState({ \n\t\t\tcount: this.state.count + 1,\n\t\t\tdeck,\n\t\t\tboard,\n\t\t\ttick: 5,\n\t\t\tviewState: ViewState.LARGE_CARD\n\t\t });\n\t};\n\n\t// gets called when this route is navigated to\n\tcomponentDidMount() {\n\t\t// start a timer for the clock:\n\t\tthis.timer = setInterval(this.updateTime, 1000);\n\t}\n\n\t// gets called just before navigating away from the route\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timer);\n\t}\n\n\tcards = (slice, suit) => slice.map((e, i) => {\n\t\tif (e) {\n\t\t\treturn (<Card data={e} suit={suit} class={style.card} />);\n\t\t}\n\n\t\treturn (\n\t\t\t<p class={`${style.aligner} ${style.card}`} key={i}>\n\t\t\t\t<span class={style.alignedItem}>-</span>\n\t\t\t</p>);\n\t});\n\n\trenderRow() {\n\t\tconst hearts = this.cards(this.state.board.slice(0, 13), Suit.HEARTS);\n\t\tconst spades = this.cards(this.state.board.slice(13, 26), Suit.SPADES);\n\t\tconst diamonds = this.cards(this.state.board.slice(26, 39), Suit.DIAMONDS);\n\t\tconst clubs = this.cards(this.state.board.slice(39, 52), Suit.CLUBS);\n\n\t\treturn <div>\n\t\t\t<div class={style.row}>{hearts}</div>\n\t\t\t<div class={style.row}>{spades}</div>\n\t\t\t<div class={style.row}>{diamonds}</div>\n\t\t\t<div class={style.row}>{clubs}</div>\n\t\t</div>;\n\t}\n\n\trender(_, { count, deck, viewState }) {\n\t\treturn (\n\t\t\t<div class={style.profile}>\n\t\t\t\t<p>\n\t\t\t\t\t<button onClick={this.increment}>Draw Card</button>\n\t\t\t\t\t{' '}\n\t\t\t\t\tCards drawn: {count+1}.\n\t\t\t\t</p>\n\t\t\t\t{viewState === ViewState.LARGE_CARD ? <LargeCard card={deck[count]} /> : this.renderRow()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"profile__3PvkN\",\"row\":\"row__rzARo\",\"card\":\"card__36gup\",\"largeCard\":\"largeCard__24yFK\",\"aligner\":\"aligner__2pRFQ\",\"alignedItem\":\"alignedItem__3WaZy\"};"],"sourceRoot":""}